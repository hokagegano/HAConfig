homeassistant:
  # Name of the location where Home Assistant is running
  name: Maison de Gano
  # Location required to calculate the time the sun rises and sets
  latitude: !secret halatitude
  longitude: !secret halongitude
  # C for Celcius, F for Fahrenheit
  #temperature_unit: C
 # unit_system: metric
  # Pick yours from here: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  time_zone: Europe/Paris
  customize: !include devices/customize.yaml

config:

recorder:
  purge_interval: 2
  purge_keep_days: 31
  db_url: sqlite:///home/gano/.homeassistant/home-assistant_v2.db

######### DEFINITION DES ZONES ###########
zone:
  name: Travail
  latitude: !secret travlatitude
  longitude: !secret travlongitude
  icon: mdi:castle
  radius: 500

zone 2:
  name: Maison de Gano
  latitude: !secret halatitude
  longitude: !secret halongitude
  icon: mdi:home
  radius: 500

zone 3:
  name: home
  latitude: !secret halatitude
  longitude: !secret halongitude
  radius: 100

frontend:
  # javascript_version: latest
  themes:
    noir:
      primary-color: black
    rouge:
      primary-color: red
    vert:
      primary-color: "#018625"
    jaune:
      primary-color: "#E28903"
    bleu:
      primary-color: "#10177D"
    cyan:
      primary-color: "#149EEF"
    dark:
      paper-grey-50: black
    white:
      paper-grey-50: paper-grey-50

emulated_hue:
  type: google_home
  host_ip: 192.168.10.8
  listen_port: 80
#  off_maps_to_on_domains:
#    - script
#    - scene  
  expose_by_default: true
  exposed_domains:
    - light
    - script
    - media_player

######## #DEFINITION DES SENSORS ###########
sensor: !include devices/sensors.yaml


######### DEFINITION DES MOTEURS TTS ###########
tts:
  - platform: google
    language: 'fr'
    cache: true
    cache_dir: /tmp/tts
    time_memory: 300
  - platform: picotts
    language: 'fr-FR'


######### DEFINITION DES DETECTEURS DE MOUVEMENTS ###########

binary_sensor:
   - platform: rfxtrx
     automatic_add: False
     #automatic_add: True
     devices:
         091300479308f9019a70:
        # 09130010ecad69019f70:
           name: mvtsdb
           data_bits: 4
           command_on: 0x9
           command_off: 0x0
           device_class: motion
           fire_event: True
           #off_delay:
           #  seconds: 5
         09130025ecad69019f80:
           name: mvtwc
           data_bits: 4
           command_on: 0x9
           command_off: 0x0           
           device_class: motion
           fire_event: True
           #off_delay:
           #  seconds: 5

# timer:
#   timerwc:
#     duration: '00:02:00'
#   timersdb:
#     duration: '00:02:00'


# apiai:
#   intents:
#     GetTemperature:
#       speech: Voici les temperatures de la maison,  il fait {{ states('sensor.salon_temperature') }} degrés dans le salon, {{ states('sensor.tempchambre_temperature') }} degrés dans le chambre, {{ states('sensor.tempetage_temperature')}} degrés à l etage, {{ states('sensor.tempsdb_temperature')}} degrés dans la salle de bain et {{ states('sensor.tempext_temperature')}} degrés à l'exterieur. 
#       async_action: False
#     SurfAi:
#       speech: Voici les conditions mises à jour !
#       async_action: False
#       action:
#         - service: notify.teleha
#           data:
#            title: surfcast
#            message: Surf Alert
#            data:
#              photo:
#              - file: /home/gano/.homeassistant/www/surf/surf.png
#     BonjourAction:
#       async_action: False
#     RoutesAi:
#       speech: Pour aller au travail il vous faudra {{ states('sensor.travail') }} minutes et pour la plage il faudra {{ states('sensor.plage') }} minutes. 
#       async_action: False

octoprint:
  # - name: aneta8
  #   host: 192.168.10.5
  #   api_key: !secret octoapi
  #   bed: true
  #   number_of_tools: 1
    host: 192.168.10.18
    api_key: !secret octoapi2
    bed: true
    number_of_tools: 1



######### DEFINITION DU PANNEAU D'ALARME ###########
alarm_control_panel:
  platform: manual
  code: !secret codeal

map:
  
######### DEFINITION DU RFXCOM ###########
rfxtrx:
  device: /dev/serial/by-id/usb-RFXCOM_RFXtrx433_A1RTHG3-if00-port0


################### HISTORY GRAPH ########
history_graph:
  gr1:
    name: Crypto Graph
    entities:
#       - sensor.gaineth
#       - sensor.gainripple
#       - sensor.gainltc
      - sensor.gaintotal
    hours_to_show: 240
    refresh: 120

######### DEFINITION DU PANEL ###########
panel_custom: 
  - name: floorplan
    sidebar_title: Floorplan
    sidebar_icon: mdi:home
    url_path: floorplan
    config: !include floorplan.yaml
    
######### DEFINITION DU COMPTE GOOGLE ###########
google:
  client_id: !secret googleclient_id
  client_secret: !secret googleclient_secret

# image_processing:
#  - platform: dlib_face_identify
#    source:
#     - entity_id: camera.salon1
#     - entity_id: camera.salon2
#     - entity_id: camera.salon3
#    faces:
#      Arnaud: /home/gano/.homeassistant/faces/arno2.jpg
#      Maeva: /home/gano/.homeassistant/faces/maeva.jpg
#      Marina: /home/gano/.homeassistant/faces/marina.jpg


######### DEFINITION DU BROKER MQTT LOCAL ###########
mqtt:
  #broker: 192.168.10.21
  broker: 192.168.10.8
  port: 1883
  client_id: hadash
  keepalive: 60
  username: hadash
  password: hadash

input_text:
  text1:
    name: Text 1
    pattern: '[a-fA-F0-9]*'

######### DEFINITION DES INPUT_SLIDER ###########
input_number:
  vacuumhour:
    name: Heure
    icon: mdi:timer
    initial: 9
    min: 0
    max: 23
    step: 1
    mode: slider
  vacuuminutes:
    name: Minutes
    icon: mdi:timer
    initial: 45
    min: 0
    max: 59
    step: 5
    mode: slider
  alarmhour:
    name: Heure
    icon: mdi:timer
    initial: 6
    min: 0
    max: 23
    step: 1
    mode: slider
  alarmminutes:
    name: Minutes
    icon: mdi:timer
    initial: 35
    min: 0
    max: 59
    step: 5
    mode: slider
  luminosite:
    name: Luminosité salon
    icon: mdi:light
    initial: 255
    min: 0
    max: 255
    step: 5
    mode: slider
  temperature:
    name: Temperature Maison
    icon: mdi:timer
    initial: 20
    min: 10
    max: 30
    step: 0.5
    mode: slider

 
 
######### DEFINITION DES INPUT_BOOLEAN ###########
input_boolean:
  vacuumauto:
    name: Mode Auto
    initial: off
  stopsoir:
    name: Eteint la lumiere la nuit
    initial: on
  autoprint2:
    name: Extinction auto A8
    initial: off
  autoprint:
    name: Extinction auto CR10
    initial: off
  squeeze:
    name: Squeeze PI Etat
    initial: off
  bonjour:
    name: Service bonjour
    initial: on
  bye:
    name: Service bye
    initial: on
  automa:
    name: Automatisation
    initial: on
  alarmweekday:
    name: Les jours de la semaine 
    initial: on
    icon: mdi:calendar
  alarmweekon:
    name: Activee     
    initial: on
  tvoffchambre:
    name: Allume le radiateur la nuit
    initial: off
  envoipic:
    name: Envoi video capturee
    initial: off
  cast_light:
    name: Chromecast lumieres
    initial: off
    icon: mdi:spotlight-beam
  freebox:
    name: Reveil Freebox
    initial: off
    icon: mdi:power
  rainbow_light:
    name: Effet Lumieres
    initial: off
    icon: mdi:traffic-light
  bieres:
    name: bieres
    initial: off
    icon: mdi:bitbucket
  papierwc:
    name: papier wc
    initial: off
    icon: mdi:emoticon-poop
  coca:
    name: coca
    initial: off
    icon: mdi:bitbucket
  lessive:
    name: lessive
    initial: off
    icon: mdi:car-wash
  poulet:
    name: poulet
    initial: off
    icon: mdi:paw
  steak:
    name: steak
    initial: off
    icon: mdi:paw
  poisson:
    name: poisson
    initial: off
    icon: mdi:fish
  shampooing:
    name: shampooing
    initial: off
    icon: mdi:car-wash
  geldouche:
    name: gel douche
    initial: off
    icon: mdi:car-wash
  cafe:
    name: cafe
    initial: off
    icon: mdi:coffee
  petitdej:
    name: a bouffer pour le matin
    initial: off
    icon: mdi:coffee
  cremefraiche:
    name: creme fraiche
    initial: off
    icon: mdi:bitbucket
  tomates:
    name: tomates
    initial: off
    icon: mdi:food-apple
  pommedeterre:
    name: pommes de terre
    initial: off
    icon: mdi:food
  poivron:
    name: poivrons
    initial: off
    icon: mdi:food-apple
  oignon:
    name: oignons
    initial: off
    icon: mdi:food-apple
  pizza:
    name: pizzas
    initial: off
    icon: mdi:pizza
  riz:
    name: Riz
    initial: off
    icon: mdi:food
  pates:
    name: pates
    initial: off
    icon: mdi:food-variant
  jambon:
    name: jambon
    initial: off
    icon: mdi:food
  apero:
    name: apero
    initial: off
    icon: mdi:food
  sacpoubelle:
    name: sacs poubelle
    initial: off
    icon: mdi:delete
  deo:
    name: déodorant
    initial: off
    icon: mdi:weather-windy
  dentifrice:
    name: dentifrice
    initial: off
    icon: mdi:brush
  oeufs:
    name: oeufs
    initial: off
    icon: mdi:food
  lait:
    name: lait
    initial: off
    icon: mdi:food
  trackme_arno:
    name: tracking arnaud
    initial: on


######### DEFINITION DES INPUT_SELECT ###########
input_select:
  themesi:
    name: 'Themes'
    options:
      - noir
      - rouge
      - vert
      - jaune
      - bleu
      - cyan
      - dark
      - white
    initial: noir
  categorie2:
    name: 'Type'
    options:
      - Choisir
      - divertissement
      - documentaires
      - films-telefilms
      - jeunesse
      - magazine
      - sport
    initial: Choisir
  radio_station:
    name: 'Radio Station:'
    options:
      - Franceinfo
      - Jazz
      - Nova Sauvagine
  chromecast_radio:
    name: 'Select Speakers:'
    options:
      - Google Home
      - Raspberry PI2
      - Shield
    initial: Google Home
    icon: mdi:speaker-wireless
  freeplayon:
    name: "Etat Allume Eteint Freebox"
    initial: "Off"
    options:
      - "On"
      - "Off"
  chainefree:
    name: "Freebox Chaines"
    icon: mdi:remote
    initial: "iTele"
    options:
      - "TF1"
      - "France2"
      - "France3"
      - "CanalPlus"
      - "France5"
      - "M6"
      - "Arte"
      - "D8"
      - "W9"
      - "TMC"
      - "NT1"
      - "NRJ12"
      - "LCP"
      - "France4"
      - "BFMTv"
      - "iTele"
      - "D17"
      - "Gulli"
      - "FranceÃ”"
      - "HD1"
      - "LEquipe21"
      - "6Ter"
      - "Numero23"
      - "RMC Decouverte"
      - "Cherie25"
      - "RTL9"


######### DEFINITION DES COMMANDES SHELL POUR LA FREEBOX ###########
shell_command: !include shell_commands.yaml


######### DEFINITION DES SWITCH WEMO ET DES DETECTEUR DE MVT RFX ###########
switch:
    - platform: wemo
      static: []
      scan_interval: 10
    - platform: broadlink
      host: 192.168.10.3
      mac: '34:EA:34:C9:A0:4D'
      friendly_name: MP1
      type: mp1
      slots:
      # friendly name of slots - optional
      # if not set, slot name will be switch's friendly_name + 'slot {slot_index}'. e.g 'MP1 slot 1'
       slot_1: 'Creality CR10'
       slot_2: 'Lampe Print'
       slot_3: 'Raspberry'
       slot_4: 'Anet A8'

vacuum:
    - platform: xiaomi_miio
      host: 192.168.10.45
      token: 72506f6c724975316453796254733453
      name: Xiaomi vacuum

# Enables support for tracking state changes over time.
history:

# Track the sun
sun:

# Show links to resources in log and frontend

# View all events in a logbook
logbook:

logger:
  default: warn
  logs:
    # homeassistant.components.camera: fatal
    requests.packages.urllib3: critical
    urllib3.connectionpool: critical

http:
  api_password: !secret httpapi_password
  base_url: !secret httpbase_url


device_tracker: !include devices/tracker.yaml

# Discover some devices automatically
discovery:

# Allows you to issue voice commands from the frontend
conversation:

# Checks for available updates
updater:

telegram_bot:
#- platform: broadcast
  - platform: polling
    api_key: !secret teleapi_key
#    parse_mode: html
    allowed_chat_ids:
      - !secret telechat_id

######### DEFINITION DES SYSTEMES DE NOTIFICATION ###########
notify:
  - platform: pushbullet
    api_key: !secret pushapi_key
    name: pushgano

  - platform: telegram
    name: teleha
    api_key: !secret teleapi_key
    chat_id: !secret telechat_id

media_player: !include devices/media_players.yaml

######### DEFINITION DES LUMIERES ###########
light:
  platform: hue
  host: 192.168.10.50
  scan_interval: 4


######### DEFINITION DES CAMERAS / IMAGES ###########
camera:
  - platform: generic
    still_image_url: http://api.sat24.com/animated/EU/infraPolair/2/Romance%20Standard%20Time/628670
    #still_image_url: http://api.sat24.com/crop?type=visual5hdcomplete&lat=44.8378&lon=-0.5792&width=300&height=300&zoom=0.70&continent=eu
    name: infrarouge
  - platform: generic
    still_image_url: http://api.sat24.com/animated/EU/visual/2/Romance%20Standard%20Time/555674
    name: france
  - platform: local_file
    file_path: /home/gano/.homeassistant/www/surf/surf.png
    name: surf
  - platform: local_file
    file_path: /home/gano/.homeassistant/www/QR_CODE.png
    name: qrcode
#  - platform: zoneminder
  # - platform: mjpeg
  #   mjpeg_url: http://192.168.10.15:9900
  #   #name: ganovideo
  #   name: salon1
  # - platform: mjpeg
  #   mjpeg_url: http://192.168.10.15:9902
  #   name: salon2
  - platform: ffmpeg
    input: /home/gano/.homeassistant/www/surf/webcamsurf.mp4
    name: webcamsurf
  - platform: mjpeg
    mjpeg_url: http://192.168.10.18:8080/?action=stream
    name: octocam

######### DEFINITION DES GROUPES ###########
group: !include_dir_merge_named group


######### DEFINITION DES SCENES ###########
scene: !include scenes.yaml

######### DEFINITION DES AUTOMATISATIONS ###########
#automation: !include automations.yaml
automation: !include automation.yaml
######### DEFINITION DES SCRIPTS ###########
script:
  tvoff:
    alias: tele off
    sequence:
     - alias: tele
       service: media_player.turn_off
       data:
        entity_id: media_player.tele_du_salon
  vacuumon:
    alias: Menage On
    sequence:
     - alias: menageon
       service: vacuum.turn_on
       data:
        entity_id: vacuum.xiaomi_vacuum
  vacuumoff:
    alias: Menage Off
    sequence:
     - alias: menageoff
       service: vacuum.turn_off
       data:
        entity_id: vacuum.xiaomi_vacuum              
  soireeoff:
    alias: soiree off
    sequence:
     - alias: soiree
       service: input_boolean.turn_off
       data:
        entity_id: input_boolean.rainbow_light
     - alias: normal
       service: scene.turn_on
       data:
        entity_id: scene.salon_normal  
  soireon:
    alias: soiree on
    sequence:
     - alias: soiree
       service: input_boolean.turn_on
       data:
        entity_id: input_boolean.rainbow_light
  eclairage:
    alias: eclairage on
    sequence:
     - alias: eclairage
       service: scene.turn_on
       data:
        entity_id: scene.salon_normal
  eclairageoff:
    alias: eclairage off
    sequence:
     - alias: eclairage
       service: scene.turn_on
       data:
        entity_id: scene.eteint
  cinemaoff:
    alias: cinema off
    sequence:
     - alias: cinema
       service: input_boolean.turn_off
       data:
        entity_id: input_boolean.cast_light 
  cinemaon:
    alias: cinema on
    sequence:
     - alias: cinema
       service: input_boolean.turn_on
       data:
        entity_id: input_boolean.cast_light
  squeezeoff:
    alias: arrete squeeze
    sequence:
     - alias: squeeze
       service: media_player.media_pause
       data:
        entity_id: media_player.pine64  
  squeeze:
    alias: lance squeeze
    sequence:
     - alias: squeeze
       service: media_player.media_play
       data:
        entity_id: media_player.pine64
  envoiliste:
    alias: Envoi Liste
    sequence:
     - alias: Envoi la liste des courses
#       service: notify.pushgano
       service: notify.teleha
       data:
         title: Liste des courses
         message: "{% if is_state('input_boolean.bieres', 'on') %} - Bieres {% endif %}{% if is_state('input_boolean.papierwc', 'on') %} - Papier WC  {% endif %}{% if is_state('input_boolean.coca', 'on') %} - Coca Cola{% endif %}{% if is_state('input_boolean.lessive', 'on') %} - Lessive  {% endif %}{% if is_state('input_boolean.poulet', 'on') %} - Poulet  {% endif %}{% if is_state('input_boolean.steak', 'on') %} - Steaks  {% endif %}{% if is_state('input_boolean.poisson', 'on') %} - Poisson  {% endif %}{% if is_state('input_boolean.shampooing', 'on') %} - Shampooing  {% endif %}{% if is_state('input_boolean.geldouche', 'on') %} - Gel Douche  {% endif %}{% if is_state('input_boolean.cafe', 'on') %} - Cafe  {% endif %}{% if is_state('input_boolean.petitdej', 'on') %} - De la bouffe pour le petit dejeuner  {% endif %}{% if is_state('input_boolean.cremefraiche', 'on') %} - Creme fraiche  {% endif %}{% if is_state('input_boolean.tomates', 'on') %} - Tomates  {% endif %}{% if is_state('input_boolean.pommedeterre', 'on') %} - Pommes de Terre  {% endif %}{% if is_state('input_boolean.poivron', 'on') %} - Poivrons  {% endif %}{% if is_state('input_boolean.oignon', 'on') %} - Oignons  {% endif %}{% if is_state('input_boolean.pizza', 'on') %} - Pïzzas  {% endif %}{% if is_state('input_boolean.riz', 'on') %} - Riz  {% endif %}{% if is_state('input_boolean.pates', 'on') %} - Pates  {% endif %}{% if is_state('input_boolean.jambon', 'on') %} - Jambon  {% endif %}{% if is_state('input_boolean.apero', 'on') %} - Des trucs pour l'apéro  {% endif %}{% if is_state('input_boolean.sacpoubelle', 'on') %} - Sacs poubelle  {% endif %}{% if is_state('input_boolean.deo', 'on') %} - déodorant  {% endif %}{% if is_state('input_boolean.dentifrice', 'on') %} - Dentifrice  {% endif %}{% if is_state('input_boolean.oeufs', 'on') %} - Oeufs  {% endif %}{% if is_state('input_boolean.lait', 'on') %} - Lait  {% endif %}{% if is_state('input_boolean.lardon', 'on') %} - Lardons  {% endif %}{% if is_state('input_boolean.puree', 'on') %} - Purée  {% endif %}{% if is_state('input_boolean.glace', 'on') %} - Glaces  {% endif %}{% if is_state('input_boolean.dessert', 'on') %} - Dessert  {% endif %}{% if is_state('input_boolean.paindemie', 'on') %} - Pain de mie  {% endif %}{% if is_state('input_boolean.rhum', 'on') %} - Rhum  {% endif %}{% if is_state('input_boolean.sopalin', 'on') %} - Sopalin  {% endif %}{% if is_state('input_boolean.huileolive', 'on') %} - Huile d'olive  {% endif %}  !"
  envoilistemiroir:
    alias: Envoi Liste Miroir
    sequence:
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.bieres', 'on') %} shell_command.miroirbieres {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.papierwc', 'on') %} shell_command.miroirwc {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.coca', 'on') %} shell_command.miroircoca {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.lessive', 'on') %} shell_command.miroirlessive {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.poulet', 'on') %} shell_command.miroirpoulet {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.steak', 'on') %} shell_command.miroirsteak {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.poisson', 'on') %} shell_command.miroirpoisson {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.shampooing', 'on') %} shell_command.miroirshampoo {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.geldouche', 'on') %} shell_command.miroirgeldouche {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.cafe', 'on') %} shell_command.miroircafe {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.petitdej', 'on') %} shell_command.miroirpetitdej {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.cremefraiche', 'on') %} shell_command.cremefraiche {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.tomates', 'on') %} shell_command.tomates {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.pommedeterre', 'on') %} shell_command.pommedeterre {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.poivron', 'on') %} shell_command.poivron {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.oignon', 'on') %} shell_command.oignon {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.pizza', 'on') %} shell_command.pizza {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.riz', 'on') %} shell_command.riz {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.pates', 'on') %} shell_command.pates {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.jambon', 'on') %} shell_command.jambon {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.apero', 'on') %} shell_command.apero {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.sacpoubelle', 'on') %} shell_command.sacpoubelle {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.deo', 'on') %} shell_command.deo {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.dentifrice', 'on') %} shell_command.dentifrice {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.oeufs', 'on') %} shell_command.oeufs {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.lardon', 'on') %} shell_command.lardon {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.puree', 'on') %} shell_command.puree {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.lait', 'on') %} shell_command.lait {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.glace', 'on') %} shell_command.glace {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.dessert', 'on') %} shell_command.dessert {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.paindemie', 'on') %} shell_command.paindemie {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.rhum', 'on') %} shell_command.rhum {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.sopalin', 'on') %} shell_command.sopalin {% endif %}
     - alias: Envoi la liste des courses sur le miroir
       service_template: >
        {% if is_state('input_boolean.huileolive', 'on') %} shell_command.huileolive {% endif %}
  effacelistemiroir:
    alias: Efface Liste Miroir
    sequence:
     - alias: Efface la liste des courses sur le miroir
#       service: notify.pushgano
       service: shell_command.cleanmiroir
  effacetodolist:
    alias: Efface ToDo Miroir
    sequence:
     - alias: Efface la ToDo List sur le miroir
#       service: notify.pushgano
       service: shell_command.todoclear
  addtodolist:
    alias: Add ToDo Miroir
    sequence:
     - alias: Add la ToDo List sur le miroir
#       service: notify.pushgano
       service: shell_command.todoadd       
  effacetodolistid:
    alias: Efface ToDo Miroir id
    sequence:
     - alias: Efface un element de la ToDo List
#       service: notify.pushgano
       service: shell_command.todoclearid
#       data:
#         title: Liste des courses
#         message: "{% if is_state('input_boolean.bieres', 'on') %} - Bieres {% endif %}{% if is_state('input_boolean.papierwc', 'on') %} - Papier WC  {% endif %}{% if is_state('input_boolean.coca', 'on') %} - Coca Cola{% endif %}{% if is_state('input_boolean.lessive', 'on') %} - Lessive  {% endif %}{% if is_state('input_boolean.poulet', 'on') %} - Poulet  {% endif %}{% if is_state('input_boolean.steak', 'on') %} - Steaks  {% endif %}{% if is_state('input_boolean.poisson', 'on') %} - Poisson  {% endif %}{% if is_state('input_boolean.shampooing', 'on') %} - Shampooing  {% endif %}{% if is_state('input_boolean.geldouche', 'on') %} - Gel Douche  {% endif %}{% if is_state('input_boolean.cafe', 'on') %} - Cafe  {% endif %}{% if is_state('input_boolean.petitdej', 'on') %} - De la bouffe pour le petit dejeuner  {% endif %}{% if is_state('input_boolean.cremefraiche', 'on') %} - Creme fraiche  {% endif %}{% if is_state('input_boolean.tomates', 'on') %} - Tomates  {% endif %}{% if is_state('input_boolean.pommedeterre', 'on') %} - Pommes de Terre  {% endif %}{% if is_state('input_boolean.poivron', 'on') %} - Poivrons  {% endif %}{% if is_state('input_boolean.oignon', 'on') %} - Oignons  {% endif %}{% if is_state('input_boolean.pizza', 'on') %} - Pïzzas  {% endif %}{% if is_state('input_boolean.riz', 'on') %} - Riz  {% endif %}{% if is_state('input_boolean.pates', 'on') %} - Pates  {% endif %}{% if is_state('input_boolean.jambon', 'on') %} - Jambon  {% endif %}{% if is_state('input_boolean.apero', 'on') %} - Des trucs pour l'apéro  {% endif %}{% if is_state('input_boolean.sacpoubelle', 'on') %} - Sacs poubelle  {% endif %}{% if is_state('input_boolean.deo', 'on') %} - déodorant  {% endif %}{% if is_state('input_boolean.dentifrice', 'on') %} - Dentifrice  {% endif %}{% if is_state('input_boolean.oeufs', 'on') %} - Oeufs  {% endif %}{% if is_state('input_boolean.lait', 'on') %} - Lait  {% endif %}{% if is_state('input_boolean.lardon', 'on') %} - Lardons  {% endif %}{% if is_state('input_boolean.puree', 'on') %} - Purée  {% endif %}{% if is_state('input_boolean.glace', 'on') %} - Glaces  {% endif %}{% if is_state('input_boolean.dessert', 'on') %} - Dessert  {% endif %}{% if is_state('input_boolean.paindemie', 'on') %} - Pain de mie  {% endif %}{% if is_state('input_boolean.rhum', 'on') %} - Rhum  {% endif %}{% if is_state('input_boolean.sopalin', 'on') %} - Sopalin  {% endif %}{% if is_state('input_boolean.huileolive', 'on') %} - Huile d'olive  {% endif %}  !"         
  colorloop:
    alias: ColorLoop
    sequence:
      - alias: colorloop bureau
        service: light.turn_on
        entity_id: light.bureau
        data:
          brightness: 255
          effect: colorloop
      - alias: colorloop bibliocolor
        service: light.turn_on
        entity_id: light.bibliocolor
        data:
          brightness: 255
          effect: colorloop
      - alias: colorloop huestrip
        service: light.turn_on
        entity_id: light.hue_lightstrip_plus_1
        data:
          brightness: 255
          effect: colorloop
      - alias: colorloop table
        service: light.turn_on
        entity_id: light.salon_couleur
        data:
          brightness: 255
          effect: colorloop
  allumehall:
    alias: Allume hall
    sequence:
      - alias: Allume le hall
        service: light.turn_on
        entity_id: light.hall
        data:
          brightness: 255
      - alias: Allume l'escalier
        service: light.turn_on
        entity_id: light.escalier
        data:
          brightness: 255
  eteinthall:
    alias: Eteint hall
    sequence:
      - alias: Eteint le hall
        service: light.turn_off
        entity_id: light.hall
      - alias: Eteint l'escalier
        service: light.turn_off
        entity_id: light.escalier
  allumechambre:
    alias: Allume Chambre
    sequence:
      - alias: Allume la chambre
        service: light.turn_on
        entity_id: light.chambre
        data:
          brightness: 255
  eteintchambre:
    alias: Eteint Chambre
    sequence:
      - alias: Eteint la Chambre
        service: light.turn_off
        entity_id: light.chambre
  # allumesalon:
  #   alias: Allume le rez de chaussée
  #   sequence:
  #     - alias: Allume les lumieres du rez de chaussée
  #       service: light.turn_on
  #       entity_id: group.salonlightcoul
  #       data:
  #         brightness: 255
  # baissesalon:
  #   alias: Baisse le rez de chaussée
  #   sequence:
  #     - alias: Baisse les lumieres du rez de chaussée
  #       service: light.turn_on
  #       entity_id: group.salonlightcoul
  #       data:
  #         brightness: 150
  # augmentesalon:
  #   alias: Augmente le rez de chaussée
  #   sequence:
  #     - alias: Augmente les lumieres du rez de chaussée
  #       service: light.turn_on
  #       entity_id: group.salonlightcoul
  #       data:
  #         brightness: 255      
  # eteintsalon:
  #   alias: Eteint le rez de chaussée
  #   sequence:
  #     - alias: Eteint les lumieres du rez de chaussée
  #       service: light.turn_off
  #       entity_id: group.salonlightcoul
  trafic:
    alias: Annonce le trafic
    sequence:
     - alias: Set Volume
       service: media_player.volume_set
       data_template:
        entity_id: media_player.google_home 
        volume_level: 0.40
     - alias: Annonce trafic
       #service: tts.google_say
       service: tts.google_say
       entity_id: media_player.google_home 
       data_template:
         # volume_level: 0,75
         message: "{{ ['Yo','Bonjour','Salut'] | random }} Il vous faudra {{ states.sensor.travail.state }} minutes pour aller au travail"
         cache: false
  maeva:
    alias: Maeva
    sequence:
     - alias: Set Volume
       service: media_player.volume_set
       data_template:
        entity_id: media_player.google_home 
        volume_level: 0.40
     - alias: Annonce maeva
       service: tts.google_say
       entity_id: media_player.google_home 
       data_template:
         # volume_level: 0,75
         message: "Bonjour Maeva, je te connais tu es la niéce de mon propriétaire. Vas-tu allé au zoo aujourd'hui ? je sais que les animaux ont envie de te voir ! je te souhaite une belle journée !"
         cache: false
  meteo:
    alias: Meteo
    sequence:
     - alias: Set Volume
       service: media_player.volume_set
       data_template:
        entity_id: media_player.google_home 
        volume_level: 0.40
     - alias: Annonce meteo
       service: tts.google_say
       entity_id: media_player.google_home 
       data_template:
         # volume_level: 0,75
         message: "Il semble que la météo prévoit, {{ states.sensor.meteotoday.state }} pour aujourd'hui. La température extérieure est de {{ states.sensor.tempext_temperature.state }} degrés"
         cache: false
  surf:
    alias: Surf
    sequence:
     - alias: Set Volume
       service: media_player.volume_set
       data_template:
        entity_id: media_player.google_home 
        volume_level: 0.40      
     - alias: Annonce surf
       service: tts.google_say
       entity_id: media_player.google_home 
       data_template:
         # volume_level: 0,75 
         message: "Les conditions de surf sont les suivantes, La température de l'océan est de {{ states.sensor.tempocean.state }} degrés, à 9h ce matin, {{ states.sensor.surf9h.state }} avec {{ states.sensor.surf9h_h.state }}, à 13h, {{ states.sensor.surf13h.state }}, avec {{ states.sensor.surf13h_h.state }}, et à 17h, {{ states.sensor.surf17h.state }}, avec {{ states.sensor.surf17h_h.state }}"
#         message: "Les previsions de surf pour la journée,  {%- if states.sensor.surf9h.state != "mauvais surf, session médiocre" -%} {%- if states.sensor.surf13h.state != "mauvais surf, session médiocre" -%} {%- if states.sensor.surf17h.state != "mauvais surf, session médiocre" -%} c'est bien toute la journée {%- else -%} c'est bien jusqu'au soir {%- endif -%} {%- else -%} c'est bien le matin {%- endif -%} {%- else -%} c'est nul toute la journée {%- endif -%} "
         cache: false
  annoncematin:
    alias: Matin
    sequence:
     - alias: Set Volume
       service: media_player.volume_set
       data_template:
        entity_id: media_player.google_home 
        volume_level: 0.40       
     - alias: Annonce Matin
       service: tts.google_say
       entity_id: media_player.google_home 
       data_template:
         # volume_level: 0,75 
         message: "Bonjour Arnaud. Il semble que la météo prévoit, {{ states.sensor.meteotoday.state }} pour aujourd'hui. La température exterieure est de {{ states.sensor.tempext_temperature.state | round }} degrés. {%- if states.sensor.travail.state | int < 14 -%}
 il n'y a pas de monde sur la route
{%- else -%}
 attention la route est chargée il vous faudra {{ states.sensor.google_travel_time__driving.state }} minutes pour aller au travail{%- endif %}, concernant les conditions de surf, {%- if (states.sensor.surf9h.state != \"mauvais surf, session médiocre\") and (states.sensor.surf13h.state != \"mauvais surf, session médiocre\") and (states.sensor.surf17h.state != \"mauvais surf, session médiocre\") -%}
c'est bien toute la journée
{%- endif %}
{%- if (states.sensor.surf9h.state == \"mauvais surf, session médiocre\") and (states.sensor.surf13h.state == \"mauvais surf, session médiocre\") and (states.sensor.surf17h.state == \"mauvais surf, session médiocre\") -%}
c'est pourri toute la journée
{%- endif %}
{%- if (states.sensor.surf9h.state != \"mauvais surf, session médiocre\") and (states.sensor.surf13h.state == \"mauvais surf, session médiocre\") and (states.sensor.surf17h.state == \"mauvais surf, session médiocre\") -%}
c'est bien le matin tot
{%- endif %}
{%- if (states.sensor.surf9h.state != \"mauvais surf, session médiocre\") and (states.sensor.surf13h.state != \"mauvais surf, session médiocre\") and (states.sensor.surf17h.state == \"mauvais surf, session médiocre\") -%}
c'est bien jusqu'en fin d'après midi
{%- endif %}
{%- if (states.sensor.surf9h.state != \"mauvais surf, session médiocre\") and (states.sensor.surf13h.state == \"mauvais surf, session médiocre\") and (states.sensor.surf17h.state != \"mauvais surf, session médiocre\") -%}
c'est bien le matin et le soir
{%- endif %}
{%- if (states.sensor.surf9h.state == \"mauvais surf, session médiocre\") and (states.sensor.surf13h.state != \"mauvais surf, session médiocre\") and (states.sensor.surf17h.state == \"mauvais surf, session médiocre\") -%}
c'est bien l'après midi
{%- endif %}
. La température de l'océan est de {{ states.sensor.tempocean.state }} degrés.
{%- if (states.calendar.dalliesagmailcom.attributes.start_time != \"null\") and as_timestamp(states.calendar.dalliesagmailcom.attributes.start_time) - as_timestamp(now().strftime(\"%Y-%m-%d %H:%M:%S\")) < 86400 -%} .  N'oubliez pas vous avez un rendez vous aujourd'hui.  {{ states.calendar.dalliesagmailcom.attributes.message }}.{%- endif %}"
  # radar:
  #   alias: Radar
  #   sequence:
  #    - alias: Set Volume
  #      service: media_player.volume_set
  #      data_template:
  #       entity_id: media_player.google_home 
  #       volume_level: 0.40       
  #    - alias: Annonce radar
  #      service: tts.google_say
  #      entity_id: media_player.google_home 
  #      data_template:
  #        # volume_level: 0,75 
  #        message: "Les radars sont positionnés aux endroits suivants, {{ states.sensor.radar.state }}"
  #        cache: false  
  previsions:
    alias: Les Previsions
    sequence:
     - alias: Set Volume
       service: media_player.volume_set
       data_template:
        entity_id: media_player.google_home
        volume_level: 0.40       
     - alias: Annonce previsions
       service: tts.google_say
       entity_id: media_player.google_home 
       data_template:
         # volume_level: 0,75
         message: "Voici le temps pour demain. Il semble que la météo prévoit, {{ states.sensor.forecast.state }}, avec des températures qui oscillent entre {{ states.sensor.yweather_temperature_min.state | round }} degrés, et {{ states.sensor.yweather_temperature_max.state | round }} degrés"
         cache: false
  # news:
  #   alias: Les News
  #   sequence:
  #    - alias: Set Volume
  #      service: media_player.volume_set
  #      data_template:
  #       entity_id: media_player.google_home 
  #       volume_level: 0.40       
  #    - alias: Annonce news
  #      service: tts.google_say
  #      entity_id: media_player.google_home 
  #      data_template:
  #        # volume_level: 0,75 
  #        message: "Voici les nouvelles de la journée, {{ states.sensor.news.state }}"
  #        cache: false
  rendezvous:
    alias: Annonce les rendez-vous
    sequence:
     - alias: Set Volume
       service: media_player.volume_set
       data_template:
        entity_id: media_player.google_home 
        volume_level: 0.40       
     - alias: Annonce rdv
       service: tts.google_say
       entity_id: media_player.google_home 
       data_template:
         # volume_level: 0,75
         message: "Arnaud, votre prochain rendez-vous est le {{ states.sensor.rdv_arno_h.state }} le sujet du rendez-vous est {{ states.sensor.rdv_arno.state }}"
         cache: false
  temperature:
    alias: Temperature
    sequence:
     - alias: Set Volume
       service: media_player.volume_set
       data_template:
        entity_id: media_player.google_home 
        volume_level: 0.40       
     - alias: Annonce temp
       service: tts.google_say
       entity_id: media_player.google_home 
       data_template:
         # volume_level: 0,75 
         message: "La température à l'étage est de {{ states.sensor.tempetage_temperature.state | round }} degrés, la température du salon est de {{ states.sensor.salon_temperature.state | round }} degrés et la température exterieure est de {{ states.sensor.tempext_temperature.state | round }} degrés"
         cache: false
  surveille:
    alias: Surveillance
    sequence:
     - alias: lance surv
       service: notify.teleha
       data:
         title: detection intrus
         message: INTRUSION
         data:
           photo:
           - file: /home/gano/.homeassistant/www/webcam/detection_cam1.jpg
           - file: /home/gano/.homeassistant/www/webcam/detection_cam2.jpg
  radiolance:
    alias: Radio sur Chromecast
    sequence:
      # -  service: media_player.volume_set
      #    data:
      #      entity_id: media_player.ca_livingroom
      #      volume_level: '0.30'
      -  service: media_player.play_media
         data_template:
           entity_id: >
            {% if is_state("input_select.chromecast_radio", "Google Home") %} media_player.google_home
            {% elif is_state("input_select.chromecast_radio", "Raspberry PI2") %} media_player.mpd
            {% elif is_state("input_select.chromecast_radio", "Shield") %} media_player.shield
            {% endif %}
           media_content_id: >
            {% if is_state("input_select.radio_station", "Franceinfo") %} http://direct.franceinfo.fr/live/franceinfo-midfi.mp3
            {% elif is_state("input_select.radio_station", "Jazz") %} http://jazzradio.ice.infomaniak.ch/jazzradio-high.mp3
            {% elif is_state("input_select.radio_station", "Nova Sauvagine") %} http://broadcast.infomaniak.ch/snb-high.mp3
            {% endif %}
           media_content_type: 'audio/mp4'

  surftv:
    alias: Surf TV
    sequence:
     - alias: Media play hiver
       service: media_player.play_media
       data:
         entity_id: media_player.shield
         media_content_type: video
         media_content_id: 'https://ganhome.duckdns.org/local/surf/webcamsurf.mp4'
  allumefreebox:
    alias: Allume la TV
    sequence:
     - alias: TV on
       service: shell_command.allumefreebox
